import React, { JSX, useState } from 'react';
import Image from 'next/image';
import { assets } from '@/assets/assets';
import Markdown from 'react-markdown';
import toast from 'react-hot-toast';
import 'highlight.js/styles/vs2015.css';
import rehypeHighlight from 'rehype-highlight';
interface MessageProps {
    role: 'user' | 'assistant';
    content: string;
}

const Message = ({ role, content }: MessageProps): JSX.Element => {

    const [ like, setLike ] = useState<boolean>(false);
    const [ dislike, setDislike ] = useState<boolean>(false);

    const copyToClipboard = (text: string) => {
        navigator.clipboard.writeText(text);
        toast.success('Message copied to clipboard');
    }

    // Helper function to extract plain text from React children (like those generated by rehypeHighlight)
    const getTextFromReactChildren = (children: React.ReactNode): string => {
        if (typeof children === 'string' || typeof children === 'number') {
            return String(children);
        }
        if (Array.isArray(children)) {
            return children.map(getTextFromReactChildren).join('');
        }
        if (React.isValidElement(children) && 'props' in children && children.props !== null && typeof children.props === 'object' && 'children' in children.props) {
            // Now TypeScript knows children.props definitely has a 'children' property
            return getTextFromReactChildren((children.props as { children?: React.ReactNode }).children);
        }
        return '';
    };

    // Custom Pre Component for react-markdown
    // This component will receive the `pre` element's children, which will typically be the `code` element.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars 
    const PreBlockRenderer = ({ node, children, ...props }: any) => { // eslint-disable-line @typescript-eslint/no-explicit-any
        // Children of <pre> will typically be a single <code> element.
        // We need to extract the language and content from that <code> element.
        const codeElement = Array.isArray(children) ? children.find(child => child && child.type === 'code') : children;

        // If for some reason the structure isn't as expected, fall back to default pre rendering
        if (!codeElement || codeElement.type !== 'code' || !codeElement.props) {
            return <pre {...props}>{children}</pre>;
        }

        const className = codeElement.props.className || '';
        const match = /language-(\w+)/.exec(className);
        const language = match ? match[1] : 'text'; // Default to 'text' if no language detected

        // The actual code content is in codeElement.props.children
        // Ensure it's a string and trim any trailing newlines that might be added by Markdown parsers.
        // const currentCode = String(codeElement.props.children).replace(/\n$/, '');
        const currentCode = getTextFromReactChildren(codeElement.props.children).replace(/\n$/, '');

        const handleCopyCode = () => {
            navigator.clipboard.writeText(currentCode);
            toast.success('Code copied to clipboard!');
        };

        return (
            <div>
                {/* Header for language and copy button */}
                <div className="code-heading flex justify-between items-center bg-gray-700 px-4 text-xs text-gray-300">
                    <span className="capitalize">{language}</span>
                    <button
                        className="flex items-center gap-1 text-gray-400 hover:text-white transition-colors duration-200 cursor-pointer"
                        onClick={handleCopyCode}
                        title="Copy code"
                    >
                        <Image src={assets.copy_icon} alt="Copy" className="w-3.5 h-3.5" />
                        Copy
                    </button>
                </div>
                {/* Render the original <pre> tag with its content (the highlighted <code> element) */}
                <pre className="p-4 overflow-x-auto text-sm" {...props}>
                    {/* The `codeElement` already contains the highlighting from rehypeHighlight */}
                    {codeElement}
                </pre>
            </div>
        );
    };

    return (
        <div className='flex flex-col items-center w-full max-w-3xl text-sm'>
            <div className={`flex flex-col w-full mb-8 ${role === 'user' && 'items-end'}`}>
                <div className={`group relative flex max-w-2xl py-3 rounded-xl ${role === 'user' ? 'bg-[#414158] px-5' : 'gap-3'}`}>
                    <div className={`absolute ${role === 'user' ? 'left-4 -bottom-6' : 'left-9 -bottom-6'} transition-all opacity-100 md:opacity-0 md:group-hover:opacity-100`}>
                        <div className='flex items-center gap-2 opacity-70'>
                            {
                                role === 'user' ? (
                                    <>
                                        <Image onClick={() => copyToClipboard(content)} className='w-4 cursor-pointer' src={assets.copy_icon} alt='' />
                                        {/* <Image className='w-4.5 cursor-pointer' src={assets.pencil_icon} alt='' /> */}
                                    </>
                                ) : (
                                    <>
                                        <Image onClick={() => copyToClipboard(content)} className='w-4.5 cursor-pointer' src={assets.copy_icon} alt='' />
                                        <Image className='w-4 cursor-pointer' src={assets.regenerate_icon} alt='' />
                                        <Image onClick={() => { setLike(!like); setDislike(false) }} className='w-4 cursor-pointer' src={like ? assets.like_icon_fill : assets.like_icon} alt='' />
                                        <Image onClick={() => { setDislike(!dislike); setLike(false) }} className='w-4 cursor-pointer' src={dislike ? assets.dislike_icon_fill : assets.dislike_icon} alt='' />
                                    </>
                                )
                            }
                        </div>
                    </div>
                    {
                        role === 'user' ? (
                            <span className='text-white/90'>{content}</span>
                        ) : (
                            <>
                                <Image className='h-9 w-9 p-1 rounded-full' src={assets.meeseek} alt='' />
                                <div className='space-y-4 w-full overflow-scroll prose prose-invert max-w-none'>
                                    <Markdown 
                                        rehypePlugins={[rehypeHighlight]} 
                                        components={{ pre: PreBlockRenderer }}
                                    >
                                        {content}
                                    </Markdown>
                                </div>
                            </>
                        )
                    }
                </div>
            </div>
        </div>
    )
}

export default Message;